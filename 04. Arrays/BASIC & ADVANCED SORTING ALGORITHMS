#1 . BUBBLE SORT 
static void bubbleSort(int arr[], int n){
        boolean swapped;

        for(int i = 0; i < n; i++){
            swapped = false;
            for(int j = 0; j < n - i - 1; j++){
                if( arr[j] > arr[j + 1]){

                    // swapping
                    int temp = arr[j];
                    arr[j] = arr[j+1];
                    arr[j+1] = temp;

                    swapped = true;  
                }
            }
            if(swapped == false)
            break;
        }
    }

#=====================================================================================================

#2. INSERTION SORT 
static void insertion sort(int arr[]){
      int n = arr.length();
      for(int i=0; i<n; i++){
        int key = arr[i];
        int j = i-1;
    while(j>=0 && arr[j] > key){
        j--;
     }
   arr[j+1] = key;
  }
}

#=====================================================================================================
#3. SELECTION SORT
static void selectionSort(int arr[], int n){
        for(int i = 0; i < n; i++){
            int min_ind = i;

            for(int j = i + 1; j < n; j++){
                if(arr[j] < arr[min_ind]){
                    min_ind = j;
                }
            }

            int temp = arr[i];
            arr[i] = arr[min_ind];
            arr[min_ind] = temp;
        }
    }
#=====================================================================================================
#4. MERGE SORT 
 static void merge(int arr[], int l, int m, int h){

        int n1=m-l+1, n2=h-m;
        int[] left=new int[n1];int[]right=new int[n2];
        for(int i=0;i<n1;i++)
            left[i]=arr[i+l];
        for(int j=0;j<n2;j++)
            right[j]=arr[m+1+j];    
        int i=0,j=0,k=l;
        while(i<n1 && j<n2){
            if(left[i]<=right[j])
                arr[k++]=left[i++];
            else
                arr[k++]=right[j++];
        }
        while(i<n1)
            arr[k++]=left[i++];
        while(j<n2)
            arr[k++]=right[j++];    
    }

    static void mergeSort(int arr[],int l,int r){
        if(r>l){
            int m=l+(r-l)/2;
            mergeSort(arr,l,m);
            mergeSort(arr,m+1,r);
            merge(arr,l,m,r);
        }
    }
#=====================================================================================================
#5. QUICK SORT
static int iPartition(int arr[], int l, int h)
    {   
        int pivot=arr[h];
        int i=l-1;
        for(int j=l;j<=h-1;j++){
            if(arr[j]<pivot){
                i++;
                int temp=arr[i];
                arr[i]=arr[j];
                arr[j]=temp;
            }
        }
        int temp=arr[i+1];
        arr[i+1]=arr[h];
        arr[h]=temp;
        return i+1;
    }

    static void qSort(int arr[],int l,int h){
        if(l<h){
            int p=iPartition(arr,l,h);
            qSort(arr,l,p-1);
            qSort(arr,p+1,h);
        }
    }
